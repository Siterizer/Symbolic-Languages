import pygame
import math
import dijkstras_algorithm as da
tab = []
BLACK = (0, 0, 0)
delay = 30
step = 2
points = 0
screenWidth = 224
screenHight = 248
pacmanWidth = 13
pacmanHight = 13
halfofPacman = 6
number_of_characters = 0
board = pygame.image.load("Sprite.png")


def check_if_new_vertex_position(x, y):
    if tab[x][y] == 4:
        return True
    return False


def get_vertex_number(x, y):
    for i in vertex:
        if vertex[i] == (x, y):
            return i


def check_if_can_move(x, y):
    x = int(math.fabs(x))
    if tab[x][y] == 1 or tab[x + pacmanHight][y + pacmanWidth] == 1:
        return False
    for i in range(0, pacmanHight + 1):
        if tab[x + i][y] == 1 or tab[x][y + i] == 1 or tab[x + i][y + pacmanHight] == 1 or \
                tab[x + pacmanHight][y + i] == 1:
            return False
    return True


def check_if_coin(x, y):
    x = x % 210
    x = int(math.fabs(x))

    global points
    if tab[x][y] == 2:
        coin_detected(x, y)
        return True
    elif tab[x + pacmanHight][y + pacmanWidth] == 2:
        coin_detected(x + pacmanHight, y + pacmanHight)
        return True
    for k in range(0, step):
        x = x + k
        y = y + k
        for i in range(0, pacmanHight + 1):
            if tab[x + i][y] == 2:
                coin_detected(x + i, y)
                return True
            elif tab[x][y + i] == 2:
                coin_detected(x, y + i)
                return True
            elif tab[x + i][y + pacmanHight] == 2:
                coin_detected(x + i, y + pacmanHight)
                return True
            elif tab[x + pacmanHight][y + i] == 2:
                coin_detected(x + pacmanHight, y + i)
                return True
    return False


def coin_detected(x, y):
    tab[x][y] = 0
    global points
    points += 1
    print(points)
    for keys in coin:
        if coin[keys] == (x, y, 1):
            coin[keys] = (x, y, 0)
            return True
    return False


def check_if_colide(characters):
    for i in range(1, number_of_characters):
        xs = math.fabs(characters[0].x - characters[i].x)
        ys = math.fabs(characters[0].y - characters[i].y)

        if (xs < 16) and (ys < 16):
            return True
    return False


def distance(x1, y1, x2, y2):
    return math.sqrt((math.fabs(x1 - x2) * math.fabs(x1 - x2)) + (math.fabs(y1 - y2) * math.fabs(y1 - y2)))


wall = {1: (0, 0, screenWidth, 4), 2: (0, 244, screenWidth, 4),
        3: (0, 0, 4, 108), 4: (0, 124, 4, 120), 5: (220, 0, 4, 108), 6: (220, 124, 4, 120),
        7: (0, 76, 44, 32), 8: (0, 124, 44, 32), 9: (180, 76, 44, 32), 10: (180, 124, 44, 32),
        11: (20, 20, 24, 16), 12: (60, 20, 32, 16), 13: (132, 20, 32, 16), 14: (180, 20, 24, 16),
        15: (20, 52, 24, 8), 16: (84, 52, 56, 8), 17: (108, 60, 8, 24), 18: (180, 52, 24, 8),
        19: (60, 52, 8, 56), 20: (68, 76, 24, 8), 21: (132, 76, 24, 8), 22: (156, 52, 8, 56),
        23: (60, 124, 8, 32), 24: (84, 148, 56, 8), 25: (108, 156, 8, 24), 26: (156, 124, 8, 32),
        27: (4, 196, 16, 8), 28: (60, 172, 32, 8), 29: (132, 172, 32, 8), 30: (204, 196, 16, 8),
        31: (20, 172, 24, 8), 32: (36, 180, 8, 24), 33: (180, 172, 24, 8), 34: (180, 180, 8, 24),
        35: (60, 196, 8, 24), 36: (20, 220, 72, 8), 37: (132, 220, 72, 8), 38: (156, 196, 8, 24),
        39: (84, 196, 56, 8), 40: (108, 204, 8, 24), 41: (108, 4, 8, 32),
        42: (84, 100, 20, 4), 43: (120, 100, 20, 4), 44: (84, 104, 4, 24), 45: (136, 104, 4, 24), 46: (84, 128, 56, 4)}

coin = {1: (11, 235, 1), 2: (19, 235, 1), 3: (27, 235, 1), 4: (35, 235, 1), 5: (43, 235, 1), 6: (51, 235, 1),
        7: (59, 235, 1), 8: (67, 235, 1), 9: (75, 235, 1), 10: (83, 235, 1), 11: (91, 235, 1), 12: (99, 235, 1),
        13: (107, 235, 1), 14: (115, 235, 1), 15: (123, 235, 1), 16: (131, 235, 1), 17: (139, 235, 1),
        18: (147, 235, 1), 20: (155, 235, 1), 21: (163, 235, 1), 22: (171, 235, 1),
        23: (179, 235, 1), 24: (187, 235, 1), 25: (195, 235, 1), 26: (203, 235, 1), 27: (211, 235, 1),
        28: (11, 227, 1), 29: (99, 227, 1), 30: (123, 227, 1), 31: (211, 227, 1), 32: (11, 219, 1),
        33: (99, 219, 1), 34: (123, 219, 1), 35: (51, 211, 1), 36: (11, 211, 1), 37: (19, 211, 1), 38: (27, 211, 1),
        39: (35, 211, 1), 40: (43, 211, 1), 41: (75, 211, 1), 42: (83, 211, 1), 43: (91, 211, 1), 44: (99, 211, 1),
        45: (123, 211, 1), 46: (131, 211, 1), 47: (139, 211, 1), 48: (147, 211, 1), 49: (171, 211, 1),
        50: (179, 211, 1), 51: (187, 211, 1), 52: (195, 211, 1), 53: (203, 211, 1), 54: (211, 211, 1),
        55: (211, 219, 1), 56: (27, 203, 1), 57: (51, 203, 1), 58: (75, 203, 1), 59: (147, 203, 1), 60: (171, 203, 1),
        61: (195, 203, 1), 62: (27, 195, 1), 63: (51, 195, 1), 64: (75, 195, 1), 65: (147, 195, 1), 66: (171, 195, 1),
        67: (195, 195, 1), 68: (8, 184, 2), 69: (19, 187, 1), 70: (27, 187, 1), 71: (51, 187, 1), 72: (59, 187, 1),
        73: (67, 187, 1), 74: (75, 187, 1), 75: (83, 187, 1), 76: (91, 187, 1), 77: (99, 187, 1), 78: (123, 187, 1),
        79: (131, 187, 1), 80: (139, 187, 1), 81: (147, 187, 1), 82: (155, 187, 1), 83: (163, 187, 1),
        84: (171, 187, 1), 85: (195, 187, 1), 86: (203, 187, 1), 87: (208, 184, 2), 88: (11, 179, 1), 89: (51, 179, 1),
        90: (99, 179, 1), 91: (123, 179, 1), 92: (171, 179, 1), 93: (211, 179, 1), 94: (11, 171, 1), 95: (51, 171, 1),
        96: (99, 171, 1), 97: (123, 171, 1), 98: (171, 171, 1), 99: (211, 171, 1), 100: (11, 163, 1), 101: (19, 163, 1),
        102: (27, 163, 1), 103: (35, 163, 1), 104: (43, 163, 1), 105: (51, 163, 1), 106: (59, 163, 1),
        107: (67, 163, 1), 108: (75, 163, 1), 109: (83, 163, 1), 110: (91, 163, 1), 111: (99, 163, 1),
        112: (123, 163, 1), 113: (131, 163, 1), 114: (139, 163, 1), 115: (147, 163, 1), 116: (155, 163, 1),
        117: (163, 163, 1), 118: (171, 163, 1), 119: (179, 163, 1), 120: (187, 163, 1), 121: (195, 163, 1),
        122: (203, 163, 1), 123: (211, 163, 1), 124: (51, 155, 1), 125: (171, 155, 1), 126: (51, 147, 1),
        127: (171, 147, 1), 128: (51, 139, 1), 129: (171, 139, 1), 130: (51, 131, 1), 131: (171, 131, 1),
        132: (51, 123, 1), 133: (171, 123, 1), 134: (51, 115, 1), 135: (171, 115, 1), 136: (51, 107, 1),
        137: (171, 107, 1), 138: (51, 99, 1), 139: (171, 99, 1), 140: (51, 91, 1), 141: (171, 91, 1), 142: (51, 83, 1),
        143: (171, 83, 1), 144: (51, 75, 1), 145: (171, 75, 1), 146: (11, 66, 1), 147: (19, 66, 1), 148: (27, 66, 1),
        149: (35, 66, 1), 150: (43, 66, 1), 151: (51, 66, 1), 152: (75, 66, 1), 153: (83, 66, 1), 154: (91, 66, 1),
        155: (99, 66, 1), 156: (123, 66, 1), 157: (131, 66, 1), 158: (139, 66, 1), 159: (147, 66, 1), 160: (171, 66, 1),
        161: (179, 66, 1), 162: (187, 66, 1), 163: (195, 66, 1), 164: (203, 66, 1), 165: (211, 66, 1), 166: (11, 59, 1),
        167: (51, 59, 1), 168: (75, 59, 1), 169: (147, 59, 1), 179: (171, 59, 1), 180: (211, 59, 1), 181: (11, 51, 1),
        182: (51, 51, 1), 183: (75, 51, 1), 184: (147, 51, 1), 185: (171, 51, 1), 186: (211, 51, 1), 187: (11, 43, 1),
        188: (19, 43, 1), 189: (27, 43, 1), 190: (35, 43, 1), 191: (43, 43, 1), 192: (51, 43, 1), 193: (59, 43, 1),
        194: (67, 43, 1), 195: (75, 43, 1), 196: (83, 43, 1), 197: (91, 43, 1), 198: (99, 43, 1), 199: (107, 43, 1),
        200: (115, 43, 1), 201: (123, 43, 1), 202: (131, 43, 1), 203: (139, 43, 1), 204: (147, 43, 1),
        205: (155, 43, 1), 206: (163, 43, 1), 207: (171, 43, 1), 208: (179, 43, 1), 209: (187, 43, 1),
        210: (195, 43, 1), 211: (203, 43, 1), 212: (211, 43, 1), 213: (11, 35, 1), 214: (51, 35, 1), 215: (99, 35, 1),
        216: (123, 35, 1), 217: (171, 35, 1), 218: (211, 35, 1), 219: (8, 24, 2), 220: (51, 27, 1), 221: (99, 27, 1),
        222: (123, 27, 1), 223: (171, 27, 1), 224: (208, 24, 2), 225: (11, 19, 1), 226: (51, 19, 1), 227: (99, 19, 1),
        228: (123, 19, 1), 229: (171, 19, 1), 230: (211, 19, 1), 231: (11, 11, 1), 232: (19, 11, 1), 233: (27, 11, 1),
        234: (35, 11, 1), 235: (43, 11, 1), 236: (51, 11, 1), 237: (59, 11, 1), 238: (67, 11, 1), 239: (75, 11, 1),
        240: (83, 11, 1), 241: (91, 11, 1), 242: (99, 11, 1), 243: (123, 11, 1), 244: (131, 11, 1), 245: (139, 11, 1),
        246: (147, 11, 1), 247: (155, 11, 1), 248: (163, 11, 1), 249: (171, 11, 1), 250: (179, 11, 1),
        251: (187, 11, 1), 252: (195, 11, 1), 253: (203, 11, 1), 254: (211, 11, 1)}

vertex = {1: (5, 5), 2: (45, 5), 3: (93, 5), 4: (117, 5), 5: (165, 5), 6: (205, 5),
          7: (5, 37), 8: (45, 37), 9: (69, 37), 10: (93, 37), 11: (117, 37), 12: (141, 37), 13: (165, 37),
          14: (205, 37), 15: (5, 61), 16: (45, 61), 17: (69, 61), 18: (93, 61), 19: (117, 61), 20: (141, 61),
          21: (165, 61), 22: (205, 61), 23: (69, 85), 24: (93, 85), 25: (105, 85), 26: (117, 85), 27: (141, 85),
          28: (45, 109), 29: (69, 109), 30: (141, 109), 31: (165, 109), 32: (69, 133), 33: (141, 133), 34: (5, 157),
          35: (45, 157), 36: (69, 157), 37: (93, 157), 38: (117, 157), 39: (141, 157), 40: (165, 157), 41: (205, 157),
          42: (5, 181), 43: (21, 181), 44: (45, 181), 45: (69, 181), 46: (93, 181), 47: (117, 181), 48: (141, 181),
          49: (165, 181), 50: (189, 181), 51: (205, 181), 52: (5, 205), 53: (21, 205), 54: (45, 205), 55: (69, 205),
          56: (93, 205), 57: (117, 205), 58: (141, 205), 59: (165, 205), 60: (189, 205), 61: (205, 205), 62: (5, 229),
          63: (93, 229), 64: (117, 229), 65: (205, 229), 66: (105, 113), 67: (105, 181)}

graph = da.Graph([(1, 2, 40), (1, 7, 32), (2, 1, 40), (2, 3, 48), (2, 8, 32), (3, 2, 48), (3, 10, 32), (4, 5, 48),
                 (4, 11, 32), (5, 4, 48), (5, 6, 40), (5, 13, 32), (6, 5, 40), (6, 14, 32), (7, 1, 32), (7, 8, 40),
                 (7, 15, 24), (8, 7, 40), (8, 9, 24), (8, 16, 24), (9, 8, 24), (9, 10, 24), (9, 17, 24), (10, 3, 32),
                 (10, 9, 24), (10, 11, 24), (11, 4, 32), (11, 10, 24), (11, 12, 24), (12, 11, 24), (12, 13, 24),
                 (12, 20, 24), (13, 5, 32), (13, 12, 24), (13, 14, 40), (13, 21, 24), (14, 6, 32), (14, 13, 30),
                 (14, 22, 24), (15, 7, 24), (15, 16, 40), (16, 8, 24), (16, 15, 40), (16, 28, 48), (17, 9, 24),
                 (17, 18, 24), (18, 17, 24), (18, 24, 24), (19, 20, 24), (19, 26, 24), (20, 12, 24), (20, 19, 24),
                 (21, 13, 24), (21, 22, 40), (21, 31, 48), (22, 14, 24), (22, 21, 40), (23, 24, 24), (23, 29, 24),
                 (24, 18, 24), (24, 23, 24), (24, 25, 12), (25, 24, 12), (25, 26, 12), (25, 66, 28), (26, 19, 24),
                 (26, 25, 12), (26, 27, 24), (27, 26, 24), (27, 30, 24), (28, 16, 48), (28, 29, 24), (28, 35, 48),
                 (29, 23, 24), (29, 28, 24), (29, 32, 24), (30, 27, 24), (30, 31, 24), (30, 33, 24), (31, 21, 48),
                 (31, 30, 24), (31, 40, 48), (32, 29, 24), (32, 33, 72), (32, 36, 24), (33, 30, 23), (33, 32, 72),
                 (33, 39, 24), (34, 35, 40), (34, 42, 24), (35, 28, 48), (35, 36, 24), (35, 44, 24), (36, 32, 24),
                 (36, 35, 24), (36, 37, 24), (37, 36, 24), (37, 46, 24), (38, 39, 24), (38, 47, 24), (39, 33, 23),
                 (39, 38, 24), (39, 40, 24), (40, 31, 48), (40, 39, 24), (40, 41, 40), (40, 49, 24), (41, 40, 40),
                 (41, 51, 24), (42, 34, 24), (42, 43, 16), (43, 42, 16), (43, 53, 24), (44, 35, 24), (44, 45, 24),
                 (44, 54, 24), (45, 44, 24), (45, 46, 24), (45, 55, 24), (46, 37, 24), (46, 45, 24), (46, 67, 12),
                 (47, 38, 24), (47, 67, 12), (47, 48, 24), (48, 47, 24), (48, 49, 24), (48, 58, 24), (49, 40, 24),
                 (49, 48, 24), (49, 59, 24), (50, 51, 16), (50, 60, 24), (51, 41, 24), (51, 50, 16), (52, 53, 16),
                 (52, 62, 24), (53, 43, 24), (53, 52, 16), (53, 54, 24), (54, 44, 24), (54, 53, 23), (55, 45, 24),
                 (55, 56, 24), (56, 55, 24), (56, 63, 24), (57, 58, 24), (57, 64, 24), (58, 48, 24), (58, 57, 24),
                 (59, 49, 24), (59, 60, 24), (60, 50, 24), (60, 61, 16), (61, 60, 16), (61, 65, 24), (62, 52, 24),
                 (62, 63, 88), (63, 56, 24), (63, 62, 88), (63, 64, 24), (64, 57, 24), (64, 63, 24), (64, 65, 88),
                 (65, 61, 24), (65, 64, 88), (66, 25, 28), (67, 46, 12), (67, 47, 12)])


def initate_tab():
    for i in range(screenWidth + 20):
        help = [0 for x in range(screenHight)]
        tab.append(help)
    #print(tab)
    for i in wall:
        for x in range(wall[i][0], wall[i][2] + wall[i][0]):
            for y in range(wall[i][1], wall[i][3] + wall[i][1]):
                tab[x][y] = 1
    for i in coin:
        if coin[i][2] == 1:
            tab[coin[i][0]][coin[i][1]] = 2
        else:
            tab[coin[i][0]][coin[i][1]] = 3
    for i in vertex:
        tab[vertex[i][0]][vertex[i][1]] = 4


